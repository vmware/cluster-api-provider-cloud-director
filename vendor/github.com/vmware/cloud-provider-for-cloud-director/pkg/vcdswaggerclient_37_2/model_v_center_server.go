/*
 * VMware Cloud Director OpenAPI
 *
 * VMware Cloud Director OpenAPI is a new API that is defined using the OpenAPI standards.<br/> This ReSTful API borrows some elements of the legacy VMware Cloud Director API and establishes new patterns for use as described below. <h4>Authentication</h4> Authentication and Authorization schemes are the same as those for the legacy APIs. You can authenticate using the JWT token via the <code>Authorization</code> header or specifying a session using <code>x-vcloud-authorization</code> (The latter form is deprecated). <h4>Operation Patterns</h4> This API follows the following general guidelines to establish a consistent CRUD pattern: <table> <tr>   <th>Operation</th><th>Description</th><th>Response Code</th><th>Response Content</th> </tr><tr>   <td>GET /items<td>Returns a paginated list of items<td>200<td>Response will include Navigational links to the items in the list. </tr><tr>   <td>POST /items<td>Returns newly created item<td>201<td>Content-Location header links to the newly created item </tr><tr>   <td>GET /items/urn<td>Returns an individual item<td>200<td>A single item using same data type as that included in list above </tr><tr>   <td>PUT /items/urn<td>Updates an individual item<td>200<td>Updated view of the item is returned </tr><tr>   <td>DELETE /items/urn<td>Deletes the item<td>204<td>No content is returned. </tr> </table> <h5>Asynchronous operations</h5> Asynchronous operations are determined by the server. In those cases, instead of responding as described above, the server responds with an HTTP Response code 202 and an empty body. The tracking task (which is the same task as all legacy API operations use) is linked via the URI provided in the <code>Location</code> header.<br/> All API calls can choose to service a request asynchronously or synchronously as determined by the server upon interpreting the request. Operations that choose to exhibit this dual behavior will have both options documented by specifying both response code(s) below. The caller must be prepared to handle responses to such API calls by inspecting the HTTP Response code. <h5>Error Conditions</h5> <b>All</b> operations report errors using the following error reporting rules: <ul>   <li>400: Bad Request - In event of bad request due to incorrect data or other user error</li>   <li>401: Bad Request - If user is unauthenticated or their session has expired</li>   <li>403: Forbidden - If the user is not authorized or the entity does not exist</li> </ul> <h4>OpenAPI Design Concepts and Principles</h4> <ul>   <li>IDs are full Uniform Resource Names (URNs).</li>   <li>OpenAPI's <code>Content-Type</code> is always <code>application/json</code></li>   <li>REST links are in the Link header.</li>   <ul>     <li>Multiple relationships for any link are represented by multiple values in a space-separated list.</li>     <li>Links have a custom VMware Cloud Director-specific &quot;model&quot; attribute that hints at the applicable data         type for the links.</li>     <li>title + rel + model attributes evaluates to a unique link.</li>     <li>Links follow Hypermedia as the Engine of Application State (HATEOAS) principles. Links are present if         certain operations are present and permitted for the user&quot;s current role and the state of the         referred entities.</li>   </ul>   <li>APIs follow a flat structure relying on cross-referencing other entities instead of the navigational style       used by the legacy VMware Cloud Director APIs.</li>   <li>Most endpoints that return a list support filtering and sorting similar to the query service in the legacy       VMware Cloud Director APIs.</li>   <li>Accept header must be included to specify the API version for the request similar to calls to existing legacy       VMware Cloud Director APIs.</li>   <li>Each feature has a version in the path element present in its URL.<br/>       <b>Note</b> API URL's without a version in their paths must be considered experimental.</li> </ul> 
 *
 * API version: 37.2
 * Contact: https://code.vmware.com/support
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

// An object representing a vCenter server. 
type VCenterServer struct {
	// URN of the associated vCenter server.
	VcId string `json:"vcId,omitempty"`
	// The name of the vCenter server.
	Name string `json:"name"`
	// Optional description.
	Description string `json:"description,omitempty"`
	// User name to connect to the server.
	Username string `json:"username"`
	// Cleartext password to connect to the server.
	Password string `json:"password,omitempty"`
	// URL of the server.
	Url string `json:"url"`
	// True if the vCenter server is enabled for use with vCloud Director.
	IsEnabled bool `json:"isEnabled,omitempty"`
	// The URL of vCenter web client server.
	VsphereWebClientServerUrl string `json:"vsphereWebClientServerUrl,omitempty"`
	// When present, indicates that a proxy exists within vCloud Director that proxies this vCenter server for access by authorized end-users. Setting this field to true when registering a vCenter server will result in a proxy being created for the vCenter server, and another for the corresponding SSO endpoint (if different from the vCenter server's endpoint). This field is immutable after the vCenter Server is registered, and will be updated by the system when/if the proxy is removed.
	HasProxy bool `json:"hasProxy,omitempty"`
	// vCenter root folder in which the vCloud Director system folder will be created. This parameter only takes the folder name and not directory structure.
	RootFolder string `json:"rootFolder,omitempty"`
	// Network in Vcenter to be used as 'NONE' network by vCD.
	VcNoneNetwork string `json:"vcNoneNetwork,omitempty"`
	// Public label of this vCenter server visible to all tenants.
	TenantVisibleName string `json:"tenantVisibleName,omitempty"`
	// True if the vCenter server is connected.
	IsConnected bool `json:"isConnected,omitempty"`
	// The vcenter mode. One of <ul> <li>NONE - undetermined</li> <li>IAAS - provider scoped</li> <li>SDDC - tenant scoped</li> <li>MIXED</li> </ul> IAAS indicates this vCenter server is scoped to the provider. SDDC indicates that this vCenter server is scoped to tenants, while MIXED indicates mixed mode, where both uses are allowed in this vCenter server.
	Mode string `json:"mode,omitempty"`
	// The vcenter listener state. One of <ul> <li>INITIAL</li> <li>INVALID_SETTINGS</li> <li>UNSUPPORTED</li> <li>DISCONNECTED</li> <li>CONNECTING</li> <li>CONNECTED_SYNCING</li> <li>CONNECTED</li> <li>STOP_REQ</li> <li>STOP_AND_PURGE_REQ</li> <li>STOP_ACK</li> </ul>
	ListenerState string `json:"listenerState,omitempty"`
	// The overall health status of clusters in this vCenter server. One of <ul> <li>GRAY</li> <li>RED</li> <li>YELLOW</li> <li>GREEN</li> </ul>
	ClusterHealthStatus string `json:"clusterHealthStatus,omitempty"`
	// The version of the VIM server.
	VcVersion string `json:"vcVersion,omitempty"`
	// The build number of the VIM server.
	BuildNumber string `json:"buildNumber,omitempty"`
	// The instance UUID property of the vCenter server.
	Uuid string `json:"uuid,omitempty"`
	// the NSX-V attached to this Virtual Center server, when present.
	NsxVManager *NsxVManager     `json:"nsxVManager,omitempty"`
	ProxyConfigurationUrn string `json:"proxyConfigurationUrn,omitempty"`
}
