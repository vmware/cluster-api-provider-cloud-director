/*
 * VMware Cloud Director OpenAPI
 *
 * VMware Cloud Director OpenAPI is a new API that is defined using the OpenAPI standards.<br/> This ReSTful API borrows some elements of the legacy VMware Cloud Director API and establishes new patterns for use as described below. <h4>Authentication</h4> Authentication and Authorization schemes are the same as those for the legacy APIs. You can authenticate using the JWT token via the <code>Authorization</code> header or specifying a session using <code>x-vcloud-authorization</code> (The latter form is deprecated). <h4>Operation Patterns</h4> This API follows the following general guidelines to establish a consistent CRUD pattern: <table> <tr>   <th>Operation</th><th>Description</th><th>Response Code</th><th>Response Content</th> </tr><tr>   <td>GET /items<td>Returns a paginated list of items<td>200<td>Response will include Navigational links to the items in the list. </tr><tr>   <td>POST /items<td>Returns newly created item<td>201<td>Content-Location header links to the newly created item </tr><tr>   <td>GET /items/urn<td>Returns an individual item<td>200<td>A single item using same data type as that included in list above </tr><tr>   <td>PUT /items/urn<td>Updates an individual item<td>200<td>Updated view of the item is returned </tr><tr>   <td>DELETE /items/urn<td>Deletes the item<td>204<td>No content is returned. </tr> </table> <h5>Asynchronous operations</h5> Asynchronous operations are determined by the server. In those cases, instead of responding as described above, the server responds with an HTTP Response code 202 and an empty body. The tracking task (which is the same task as all legacy API operations use) is linked via the URI provided in the <code>Location</code> header.<br/> All API calls can choose to service a request asynchronously or synchronously as determined by the server upon interpreting the request. Operations that choose to exhibit this dual behavior will have both options documented by specifying both response code(s) below. The caller must be prepared to handle responses to such API calls by inspecting the HTTP Response code. <h5>Error Conditions</h5> <b>All</b> operations report errors using the following error reporting rules: <ul>   <li>400: Bad Request - In event of bad request due to incorrect data or other user error</li>   <li>401: Bad Request - If user is unauthenticated or their session has expired</li>   <li>403: Forbidden - If the user is not authorized or the entity does not exist</li> </ul> <h4>OpenAPI Design Concepts and Principles</h4> <ul>   <li>IDs are full Uniform Resource Names (URNs).</li>   <li>OpenAPI's <code>Content-Type</code> is always <code>application/json</code></li>   <li>REST links are in the Link header.</li>   <ul>     <li>Multiple relationships for any link are represented by multiple values in a space-separated list.</li>     <li>Links have a custom VMware Cloud Director-specific &quot;model&quot; attribute that hints at the applicable data         type for the links.</li>     <li>title + rel + model attributes evaluates to a unique link.</li>     <li>Links follow Hypermedia as the Engine of Application State (HATEOAS) principles. Links are present if         certain operations are present and permitted for the user&quot;s current role and the state of the         referred entities.</li>   </ul>   <li>APIs follow a flat structure relying on cross-referencing other entities instead of the navigational style       used by the legacy VMware Cloud Director APIs.</li>   <li>Most endpoints that return a list support filtering and sorting similar to the query service in the legacy       VMware Cloud Director APIs.</li>   <li>Accept header must be included to specify the API version for the request similar to calls to existing legacy       VMware Cloud Director APIs.</li>   <li>Each feature has a version in the path element present in its URL.<br/>       <b>Note</b> API URL's without a version in their paths must be considered experimental.</li> </ul> 
 *
 * API version: 37.2
 * Contact: https://code.vmware.com/support
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

// Specifies the IP Space configuration.
type IpSpace struct {
	// Represents current status of the networking object. 
	Status *NetworkingObjectStatusType `json:"status,omitempty"`
	// The identifier of the IP Space in URN format.
	Id string `json:"id,omitempty"`
	// The name of the IP Space. Name is unique across all IP Spaces of a given type and organization.
	Name string `json:"name"`
	// The description of the IP Space.
	Description string `json:"description,omitempty"`
	// The type of the IP Space. Possible values are: <ul> <li> PUBLIC - These can be consumed by multiple organizations. These are created by System Administrators only, for managing public IPs. The IP addresses and IP Prefixes from this IP space are allocated to specific organizations for consumption. <li> PRIVATE - These can be consumed by only a single organization. All the IPs within this IP Space are allocated to the particular organization. <li> SHARED_SERVICES - These are for internal use only. The IP addresses and IP Prefixes from this IP space can be consumed by multiple organizations but those IP addresses and IP Prefixes will not be not visible to the individual users within the organization. These are created by System Administrators only, typically for a service or for management networks. </ul> Only <em>SHARED_SERVICES</em> type can be changed to <em>PUBLIC</em> type. No oher type changes are allowed. 
	Type_ string `json:"type"`
	// The organization this IP Space belongs to. This property is only applicable for IP Spaces with type <em>PRIVATE</em>. This property is required for IP Spaces with type <em>PRIVATE</em>. 
	OrgRef *EntityReference `json:"orgRef,omitempty"`
	// Utilization summary for this IP space.
	Utilization *IpSpaceUtilizationSummary `json:"utilization,omitempty"`
	// List of IP Ranges. These are logically treated as a single block of IPs for allocation purpose.
	IpSpaceRanges *IpSpaceRanges `json:"ipSpaceRanges,omitempty"`
	// List of IP Prefixes.
	IpSpacePrefixes []IpSpacePrefixes `json:"ipSpacePrefixes,omitempty"`
	// This defines the exact span of IP addresses in a CIDR format within which all IP Ranges and IP Prefixes of this IP Space must be contained. This typically defines the span of IP addresses used within this Data Center. This is used by the system for creation of NAT rules and BGP prefixes. 
	IpSpaceInternalScope []string `json:"ipSpaceInternalScope"`
	// This defines the total span of IP addresses in a CIDR format within which all IP Ranges and IP Prefixes of this IP Space must be contained. This is used by the system for creation of NAT rules and BGP prefixes. This typically defines the span of IP addresses outside the bounds of this Data Center. For the internet this may be 0.0.0.0/0.  For a WAN, this could be 10.0.0.0/8. 
	IpSpaceExternalScope string `json:"ipSpaceExternalScope,omitempty"`
	// Whether the route advertisement is enabled for this IP Space or not. If true, the routed Org VDC networks which are configured from this IP Space will be advertised from the connected Edge Gateway to the Provider Gateway. Route advertisement must be enabled on a particular network for it to be advertised. Networks from the PRIVATE IP Spaces will only be advertised if the associated Provider Gateway is owned by the Organization. 
	RouteAdvertisementEnabled bool `json:"routeAdvertisementEnabled,omitempty"`
}
