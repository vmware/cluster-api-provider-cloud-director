/*
   Copyright 2021 VMware, Inc.
   SPDX-License-Identifier: Apache-2.0
*/

/*
 * VMware Cloud Director OpenAPI
 *
 * VMware Cloud Director OpenAPI is a new API that is defined using the OpenAPI standards.<br/> This ReSTful API borrows some elements of the legacy VMware Cloud Director API and establishes new patterns for use as described below. <h4>Authentication</h4> Authentication and Authorization schemes are the same as those for the legacy APIs. You can authenticate using the JWT token via the <code>Authorization</code> header or specifying a session using <code>x-vcloud-authorization</code> (The latter form is deprecated). <h4>Operation Patterns</h4> This API follows the following general guidelines to establish a consistent CRUD pattern: <table> <tr>   <th>Operation</th><th>Description</th><th>Response Code</th><th>Response Content</th> </tr><tr>   <td>GET /items<td>Returns a paginated list of items<td>200<td>Response will include Navigational links to the items in the list. </tr><tr>   <td>POST /items<td>Returns newly created item<td>201<td>Content-Location header links to the newly created item </tr><tr>   <td>GET /items/urn<td>Returns an individual item<td>200<td>A single item using same data type as that included in list above </tr><tr>   <td>PUT /items/urn<td>Updates an individual item<td>200<td>Updated view of the item is returned </tr><tr>   <td>DELETE /items/urn<td>Deletes the item<td>204<td>No content is returned. </tr> </table> <h5>Asynchronous operations</h5> Asynchronous operations are determined by the server. In those cases, instead of responding as described above, the server responds with an HTTP Response code 202 and an empty body. The tracking task (which is the same task as all legacy API operations use) is linked via the URI provided in the <code>Location</code> header.<br/> All API calls can choose to service a request asynchronously or synchronously as determined by the server upon interpreting the request. Operations that choose to exhibit this dual behavior will have both options documented by specifying both response code(s) below. The caller must be prepared to handle responses to such API calls by inspecting the HTTP Response code. <h5>Error Conditions</h5> <b>All</b> operations report errors using the following error reporting rules: <ul>   <li>400: Bad Request - In event of bad request due to incorrect data or other user error</li>   <li>401: Bad Request - If user is unauthenticated or their session has expired</li>   <li>403: Forbidden - If the user is not authorized or the entity does not exist</li> </ul> <h4>OpenAPI Design Concepts and Principles</h4> <ul>   <li>IDs are full Uniform Resource Names (URNs).</li>   <li>OpenAPI's <code>Content-Type</code> is always <code>application/json</code></li>   <li>REST links are in the Link header.</li>   <ul>     <li>Multiple relationships for any link are represented by multiple values in a space-separated list.</li>     <li>Links have a custom VMware Cloud Director-specific &quot;model&quot; attribute that hints at the applicable data         type for the links.</li>     <li>title + rel + model attributes evaluates to a unique link.</li>     <li>Links follow Hypermedia as the Engine of Application State (HATEOAS) principles. Links are present if         certain operations are present and permitted for the user&quot;s current role and the state of the         referred entities.</li>   </ul>   <li>APIs follow a flat structure relying on cross-referencing other entities instead of the navigational style       used by the legacy VMware Cloud Director APIs.</li>   <li>Most endpoints that return a list support filtering and sorting similar to the query service in the legacy       VMware Cloud Director APIs.</li>   <li>Accept header must be included to specify the API version for the request similar to calls to existing legacy       VMware Cloud Director APIs.</li>   <li>Each feature has a version in the path element present in its URL.<br/>       <b>Note</b> API URL's without a version in their paths must be considered experimental.</li> </ul>
 *
 * API version: 36.0
 * Contact: https://code.vmware.com/support
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"errors"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"reflect"
	"regexp"
	"strconv"
	"strings"
	"time"
	"unicode/utf8"

	"golang.org/x/oauth2"
)

var (
	jsonCheck = regexp.MustCompile("(?i:(?:application|text)/json)")
	xmlCheck  = regexp.MustCompile("(?i:(?:application|text)/xml)")
)

// APIClient manages communication with the VMware Cloud Director OpenAPI API v36.0
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	cfg    *Configuration
	common service // Reuse a single struct instead of allocating one for each service on the heap.

	// API Services

	AccessControlsApi *AccessControlsApiService

	AccessLevelsApi *AccessLevelsApiService

	AdvisoryApi *AdvisoryApiService

	ApplicationPortProfileApi *ApplicationPortProfileApiService

	ApplicationPortProfilesApi *ApplicationPortProfilesApiService

	AuditTrailApi *AuditTrailApiService

	BrandingApi *BrandingApiService

	CapabilitiesApi *CapabilitiesApiService

	CellApi *CellApiService

	CertificateLibraryApi *CertificateLibraryApiService

	CloudApiBaseApi *CloudApiBaseApiService

	CodegenPlaceholderApi *CodegenPlaceholderApiService

	ConfigurationsApi *ConfigurationsApiService

	CorsApi *CorsApiService

	CrossVdcNetworkApi *CrossVdcNetworkApiService

	CrossVdcNetworksApi *CrossVdcNetworksApiService

	CustomEntitiesApi *CustomEntitiesApiService

	DefinedEntityApi *DefinedEntityApiService

	DefinedEntityTypeApi *DefinedEntityTypeApiService

	DefinedInterfaceApi *DefinedInterfaceApiService

	DefinedInterfaceBehaviorsApi *DefinedInterfaceBehaviorsApiService

	DfwPoliciesApi *DfwPoliciesApiService

	DfwPolicyApi *DfwPolicyApiService

	DvpgPropertiesApi *DvpgPropertiesApiService

	EdgeClusterApi *EdgeClusterApiService

	EdgeClustersApi *EdgeClustersApiService

	EdgeGatewayApi *EdgeGatewayApiService

	EdgeGatewayBgpApi *EdgeGatewayBgpApiService

	EdgeGatewayBgpNeighborApi *EdgeGatewayBgpNeighborApiService

	EdgeGatewayBgpNeighborsApi *EdgeGatewayBgpNeighborsApiService

	EdgeGatewayDhcpApi *EdgeGatewayDhcpApiService

	EdgeGatewayDnsApi *EdgeGatewayDnsApiService

	EdgeGatewayFirewallRuleApi *EdgeGatewayFirewallRuleApiService

	EdgeGatewayFirewallRulesApi *EdgeGatewayFirewallRulesApiService

	EdgeGatewayIpSecVpnTunnelApi *EdgeGatewayIpSecVpnTunnelApiService

	EdgeGatewayIpSecVpnTunnelConnectionPropertiesApi *EdgeGatewayIpSecVpnTunnelConnectionPropertiesApiService

	EdgeGatewayIpSecVpnTunnelsApi *EdgeGatewayIpSecVpnTunnelsApiService

	EdgeGatewayL2VpnTunnelApi *EdgeGatewayL2VpnTunnelApiService

	EdgeGatewayL2VpnTunnelsApi *EdgeGatewayL2VpnTunnelsApiService

	EdgeGatewayLoadBalancerApi *EdgeGatewayLoadBalancerApiService

	EdgeGatewayLoadBalancerAnalyticsApi *EdgeGatewayLoadBalancerAnalyticsApiService

	EdgeGatewayLoadBalancerPoolApi *EdgeGatewayLoadBalancerPoolApiService

	EdgeGatewayLoadBalancerPoolsApi *EdgeGatewayLoadBalancerPoolsApiService

	EdgeGatewayLoadBalancerVirtualServiceApi *EdgeGatewayLoadBalancerVirtualServiceApiService

	EdgeGatewayLoadBalancerVirtualServicesApi *EdgeGatewayLoadBalancerVirtualServicesApiService

	EdgeGatewayNatRuleApi *EdgeGatewayNatRuleApiService

	EdgeGatewayNatRulesApi *EdgeGatewayNatRulesApiService

	EdgeGatewayPrefixListApi *EdgeGatewayPrefixListApiService

	EdgeGatewayPrefixListsApi *EdgeGatewayPrefixListsApiService

	EdgeGatewayRouteAdvertisementApi *EdgeGatewayRouteAdvertisementApiService

	EdgeGatewaySLAACProfileApi *EdgeGatewaySLAACProfileApiService

	EdgeGatewaysApi *EdgeGatewaysApiService

	EgressPointApi *EgressPointApiService

	EgressPointsApi *EgressPointsApiService

	EmailSettingsApi *EmailSettingsApiService

	EntityApi *EntityApiService

	EntityQuotasApi *EntityQuotasApiService

	ExternalNetworkApi *ExternalNetworkApiService

	ExternalNetworksApi *ExternalNetworksApiService

	ExternalServiceApi *ExternalServiceApiService

	FeatureFlagApi *FeatureFlagApiService

	FeatureFlagsApi *FeatureFlagsApiService

	FirewallGroupApi *FirewallGroupApiService

	FirewallGroupsApi *FirewallGroupsApiService

	GlobalRolesApi *GlobalRolesApiService

	GroupApi *GroupApiService

	K8sClusterApi *K8sClusterApiService

	LDAPApi *LDAPApiService

	LoadBalancerCloudApi *LoadBalancerCloudApiService

	LoadBalancerCloudsApi *LoadBalancerCloudsApiService

	LoadBalancerControllerApi *LoadBalancerControllerApiService

	LoadBalancerControllersApi *LoadBalancerControllersApiService

	LoadBalancerServiceEngineGroupApi *LoadBalancerServiceEngineGroupApiService

	LoadBalancerServiceEngineGroupAssignmentApi *LoadBalancerServiceEngineGroupAssignmentApiService

	LoadBalancerServiceEngineGroupAssignmentsApi *LoadBalancerServiceEngineGroupAssignmentsApiService

	LoadBalancerServiceEngineGroupsApi *LoadBalancerServiceEngineGroupsApiService

	LogicalVmGroupsApi *LogicalVmGroupsApiService

	NetworkContextProfileApi *NetworkContextProfileApiService

	NetworkContextProfileAttributesApi *NetworkContextProfileAttributesApiService

	NetworkContextProfilesApi *NetworkContextProfilesApiService

	NetworkPoolApi *NetworkPoolApiService

	NetworkPoolsApi *NetworkPoolsApiService

	NsxAlbResourcesApi *NsxAlbResourcesApiService

	NsxTResourcesApi *NsxTResourcesApiService

	NsxVResourcesApi *NsxVResourcesApiService

	OrgApi *OrgApiService

	OrgVdcNetworkApi *OrgVdcNetworkApiService

	OrgVdcNetworkDhcpApi *OrgVdcNetworkDhcpApiService

	OrgVdcNetworksApi *OrgVdcNetworksApiService

	OrgVdcStoragePolicyApi *OrgVdcStoragePolicyApiService

	PreferencesApi *PreferencesApiService

	ProviderVdcApi *ProviderVdcApiService

	ProxyApi *ProxyApiService

	ProxyConfigurationApi *ProxyConfigurationApiService

	PvdcComputePoliciesApi *PvdcComputePoliciesApiService

	PvdcComputePolicies2Api *PvdcComputePolicies2ApiService

	PvdcStoragePolicyApi *PvdcStoragePolicyApiService

	QuotaPoliciesApi *QuotaPoliciesApiService

	QuotaPolicyAssignmentApi *QuotaPolicyAssignmentApiService

	RightsApi *RightsApiService

	RightsBundlesApi *RightsBundlesApiService

	RightsCategoriesApi *RightsCategoriesApiService

	RolesApi *RolesApiService

	SddcProxyApi *SddcProxyApiService

	SddcsApi *SddcsApiService

	SecurityTagsApi *SecurityTagsApiService

	ServiceAppApi *ServiceAppApiService

	ServiceAppsApi *ServiceAppsApiService

	ServicesApi *ServicesApiService

	SessionsApi *SessionsApiService

	SiteSettingsApi *SiteSettingsApiService

	SslSettingsApi *SslSettingsApiService

	StorageContainerApi *StorageContainerApiService

	StoragePolicyApi *StoragePolicyApiService

	TestConnectionApi *TestConnectionApiService

	TokenApi *TokenApiService

	TrustedCertificatesApi *TrustedCertificatesApiService

	TypeAccessControlsApi *TypeAccessControlsApiService

	UiPluginApi *UiPluginApiService

	UiPluginResourceApi *UiPluginResourceApiService

	UiPluginTenantsApi *UiPluginTenantsApiService

	UiPluginsApi *UiPluginsApiService

	UniversalRouterApi *UniversalRouterApiService

	UniversalRouterDhcpApi *UniversalRouterDhcpApiService

	UniversalRouterDnsApi *UniversalRouterDnsApiService

	UniversalRouterHealthApi *UniversalRouterHealthApiService

	UniversalRoutersApi *UniversalRoutersApiService

	UniversalRoutingApi *UniversalRoutingApiService

	UserApi *UserApiService

	VCenterResourcesApi *VCenterResourcesApiService

	VRealizeOrchestratorApi *VRealizeOrchestratorApiService

	VRealizeOrchestratorsApi *VRealizeOrchestratorsApiService

	VdcApi *VdcApiService

	Vdc2Api *Vdc2ApiService

	VdcComputePoliciesApi *VdcComputePoliciesApiService

	VdcComputePolicies2Api *VdcComputePolicies2ApiService

	VdcGroupApi *VdcGroupApiService

	VdcGroupCandidatesApi *VdcGroupCandidatesApiService

	VdcGroupsApi *VdcGroupsApiService

	VdcGroupsSettingsApi *VdcGroupsSettingsApiService

	VdcNetworkProfileApi *VdcNetworkProfileApiService

	VirtualCenterApi *VirtualCenterApiService

	VmcSddcsApi *VmcSddcsApiService

	VrealizeBrowseApi *VrealizeBrowseApiService

	VrealizeWorkflowsApi *VrealizeWorkflowsApiService

	VroWorkflowExecutionApi *VroWorkflowExecutionApiService

	VroWorkflowPresentationApi *VroWorkflowPresentationApiService
}

type service struct {
	client *APIClient
}

// NewAPIClient creates a new API client. Requires a userAgent string describing your application.
// optionally a custom http.Client to allow for advanced features such as caching.
func NewAPIClient(cfg *Configuration) *APIClient {
	if cfg.HTTPClient == nil {
		cfg.HTTPClient = http.DefaultClient
	}

	c := &APIClient{}
	c.cfg = cfg
	c.common.client = c

	// API Services
	c.AccessControlsApi = (*AccessControlsApiService)(&c.common)
	c.AccessLevelsApi = (*AccessLevelsApiService)(&c.common)
	c.AdvisoryApi = (*AdvisoryApiService)(&c.common)
	c.ApplicationPortProfileApi = (*ApplicationPortProfileApiService)(&c.common)
	c.ApplicationPortProfilesApi = (*ApplicationPortProfilesApiService)(&c.common)
	c.AuditTrailApi = (*AuditTrailApiService)(&c.common)
	c.BrandingApi = (*BrandingApiService)(&c.common)
	c.CapabilitiesApi = (*CapabilitiesApiService)(&c.common)
	c.CellApi = (*CellApiService)(&c.common)
	c.CertificateLibraryApi = (*CertificateLibraryApiService)(&c.common)
	c.CloudApiBaseApi = (*CloudApiBaseApiService)(&c.common)
	c.CodegenPlaceholderApi = (*CodegenPlaceholderApiService)(&c.common)
	c.ConfigurationsApi = (*ConfigurationsApiService)(&c.common)
	c.CorsApi = (*CorsApiService)(&c.common)
	c.CrossVdcNetworkApi = (*CrossVdcNetworkApiService)(&c.common)
	c.CrossVdcNetworksApi = (*CrossVdcNetworksApiService)(&c.common)
	c.CustomEntitiesApi = (*CustomEntitiesApiService)(&c.common)
	c.DefinedEntityApi = (*DefinedEntityApiService)(&c.common)
	c.DefinedEntityTypeApi = (*DefinedEntityTypeApiService)(&c.common)
	c.DefinedInterfaceApi = (*DefinedInterfaceApiService)(&c.common)
	c.DefinedInterfaceBehaviorsApi = (*DefinedInterfaceBehaviorsApiService)(&c.common)
	c.DfwPoliciesApi = (*DfwPoliciesApiService)(&c.common)
	c.DfwPolicyApi = (*DfwPolicyApiService)(&c.common)
	c.DvpgPropertiesApi = (*DvpgPropertiesApiService)(&c.common)
	c.EdgeClusterApi = (*EdgeClusterApiService)(&c.common)
	c.EdgeClustersApi = (*EdgeClustersApiService)(&c.common)
	c.EdgeGatewayApi = (*EdgeGatewayApiService)(&c.common)
	c.EdgeGatewayBgpApi = (*EdgeGatewayBgpApiService)(&c.common)
	c.EdgeGatewayBgpNeighborApi = (*EdgeGatewayBgpNeighborApiService)(&c.common)
	c.EdgeGatewayBgpNeighborsApi = (*EdgeGatewayBgpNeighborsApiService)(&c.common)
	c.EdgeGatewayDhcpApi = (*EdgeGatewayDhcpApiService)(&c.common)
	c.EdgeGatewayDnsApi = (*EdgeGatewayDnsApiService)(&c.common)
	c.EdgeGatewayFirewallRuleApi = (*EdgeGatewayFirewallRuleApiService)(&c.common)
	c.EdgeGatewayFirewallRulesApi = (*EdgeGatewayFirewallRulesApiService)(&c.common)
	c.EdgeGatewayIpSecVpnTunnelApi = (*EdgeGatewayIpSecVpnTunnelApiService)(&c.common)
	c.EdgeGatewayIpSecVpnTunnelConnectionPropertiesApi = (*EdgeGatewayIpSecVpnTunnelConnectionPropertiesApiService)(&c.common)
	c.EdgeGatewayIpSecVpnTunnelsApi = (*EdgeGatewayIpSecVpnTunnelsApiService)(&c.common)
	c.EdgeGatewayL2VpnTunnelApi = (*EdgeGatewayL2VpnTunnelApiService)(&c.common)
	c.EdgeGatewayL2VpnTunnelsApi = (*EdgeGatewayL2VpnTunnelsApiService)(&c.common)
	c.EdgeGatewayLoadBalancerApi = (*EdgeGatewayLoadBalancerApiService)(&c.common)
	c.EdgeGatewayLoadBalancerAnalyticsApi = (*EdgeGatewayLoadBalancerAnalyticsApiService)(&c.common)
	c.EdgeGatewayLoadBalancerPoolApi = (*EdgeGatewayLoadBalancerPoolApiService)(&c.common)
	c.EdgeGatewayLoadBalancerPoolsApi = (*EdgeGatewayLoadBalancerPoolsApiService)(&c.common)
	c.EdgeGatewayLoadBalancerVirtualServiceApi = (*EdgeGatewayLoadBalancerVirtualServiceApiService)(&c.common)
	c.EdgeGatewayLoadBalancerVirtualServicesApi = (*EdgeGatewayLoadBalancerVirtualServicesApiService)(&c.common)
	c.EdgeGatewayNatRuleApi = (*EdgeGatewayNatRuleApiService)(&c.common)
	c.EdgeGatewayNatRulesApi = (*EdgeGatewayNatRulesApiService)(&c.common)
	c.EdgeGatewayPrefixListApi = (*EdgeGatewayPrefixListApiService)(&c.common)
	c.EdgeGatewayPrefixListsApi = (*EdgeGatewayPrefixListsApiService)(&c.common)
	c.EdgeGatewayRouteAdvertisementApi = (*EdgeGatewayRouteAdvertisementApiService)(&c.common)
	c.EdgeGatewaySLAACProfileApi = (*EdgeGatewaySLAACProfileApiService)(&c.common)
	c.EdgeGatewaysApi = (*EdgeGatewaysApiService)(&c.common)
	c.EgressPointApi = (*EgressPointApiService)(&c.common)
	c.EgressPointsApi = (*EgressPointsApiService)(&c.common)
	c.EmailSettingsApi = (*EmailSettingsApiService)(&c.common)
	c.EntityApi = (*EntityApiService)(&c.common)
	c.EntityQuotasApi = (*EntityQuotasApiService)(&c.common)
	c.ExternalNetworkApi = (*ExternalNetworkApiService)(&c.common)
	c.ExternalNetworksApi = (*ExternalNetworksApiService)(&c.common)
	c.ExternalServiceApi = (*ExternalServiceApiService)(&c.common)
	c.FeatureFlagApi = (*FeatureFlagApiService)(&c.common)
	c.FeatureFlagsApi = (*FeatureFlagsApiService)(&c.common)
	c.FirewallGroupApi = (*FirewallGroupApiService)(&c.common)
	c.FirewallGroupsApi = (*FirewallGroupsApiService)(&c.common)
	c.GlobalRolesApi = (*GlobalRolesApiService)(&c.common)
	c.GroupApi = (*GroupApiService)(&c.common)
	c.K8sClusterApi = (*K8sClusterApiService)(&c.common)
	c.LDAPApi = (*LDAPApiService)(&c.common)
	c.LoadBalancerCloudApi = (*LoadBalancerCloudApiService)(&c.common)
	c.LoadBalancerCloudsApi = (*LoadBalancerCloudsApiService)(&c.common)
	c.LoadBalancerControllerApi = (*LoadBalancerControllerApiService)(&c.common)
	c.LoadBalancerControllersApi = (*LoadBalancerControllersApiService)(&c.common)
	c.LoadBalancerServiceEngineGroupApi = (*LoadBalancerServiceEngineGroupApiService)(&c.common)
	c.LoadBalancerServiceEngineGroupAssignmentApi = (*LoadBalancerServiceEngineGroupAssignmentApiService)(&c.common)
	c.LoadBalancerServiceEngineGroupAssignmentsApi = (*LoadBalancerServiceEngineGroupAssignmentsApiService)(&c.common)
	c.LoadBalancerServiceEngineGroupsApi = (*LoadBalancerServiceEngineGroupsApiService)(&c.common)
	c.LogicalVmGroupsApi = (*LogicalVmGroupsApiService)(&c.common)
	c.NetworkContextProfileApi = (*NetworkContextProfileApiService)(&c.common)
	c.NetworkContextProfileAttributesApi = (*NetworkContextProfileAttributesApiService)(&c.common)
	c.NetworkContextProfilesApi = (*NetworkContextProfilesApiService)(&c.common)
	c.NetworkPoolApi = (*NetworkPoolApiService)(&c.common)
	c.NetworkPoolsApi = (*NetworkPoolsApiService)(&c.common)
	c.NsxAlbResourcesApi = (*NsxAlbResourcesApiService)(&c.common)
	c.NsxTResourcesApi = (*NsxTResourcesApiService)(&c.common)
	c.NsxVResourcesApi = (*NsxVResourcesApiService)(&c.common)
	c.OrgApi = (*OrgApiService)(&c.common)
	c.OrgVdcNetworkApi = (*OrgVdcNetworkApiService)(&c.common)
	c.OrgVdcNetworkDhcpApi = (*OrgVdcNetworkDhcpApiService)(&c.common)
	c.OrgVdcNetworksApi = (*OrgVdcNetworksApiService)(&c.common)
	c.OrgVdcStoragePolicyApi = (*OrgVdcStoragePolicyApiService)(&c.common)
	c.PreferencesApi = (*PreferencesApiService)(&c.common)
	c.ProviderVdcApi = (*ProviderVdcApiService)(&c.common)
	c.ProxyApi = (*ProxyApiService)(&c.common)
	c.ProxyConfigurationApi = (*ProxyConfigurationApiService)(&c.common)
	c.PvdcComputePoliciesApi = (*PvdcComputePoliciesApiService)(&c.common)
	c.PvdcComputePolicies2Api = (*PvdcComputePolicies2ApiService)(&c.common)
	c.PvdcStoragePolicyApi = (*PvdcStoragePolicyApiService)(&c.common)
	c.QuotaPoliciesApi = (*QuotaPoliciesApiService)(&c.common)
	c.QuotaPolicyAssignmentApi = (*QuotaPolicyAssignmentApiService)(&c.common)
	c.RightsApi = (*RightsApiService)(&c.common)
	c.RightsBundlesApi = (*RightsBundlesApiService)(&c.common)
	c.RightsCategoriesApi = (*RightsCategoriesApiService)(&c.common)
	c.RolesApi = (*RolesApiService)(&c.common)
	c.SddcProxyApi = (*SddcProxyApiService)(&c.common)
	c.SddcsApi = (*SddcsApiService)(&c.common)
	c.SecurityTagsApi = (*SecurityTagsApiService)(&c.common)
	c.ServiceAppApi = (*ServiceAppApiService)(&c.common)
	c.ServiceAppsApi = (*ServiceAppsApiService)(&c.common)
	c.ServicesApi = (*ServicesApiService)(&c.common)
	c.SessionsApi = (*SessionsApiService)(&c.common)
	c.SiteSettingsApi = (*SiteSettingsApiService)(&c.common)
	c.SslSettingsApi = (*SslSettingsApiService)(&c.common)
	c.StorageContainerApi = (*StorageContainerApiService)(&c.common)
	c.StoragePolicyApi = (*StoragePolicyApiService)(&c.common)
	c.TestConnectionApi = (*TestConnectionApiService)(&c.common)
	c.TokenApi = (*TokenApiService)(&c.common)
	c.TrustedCertificatesApi = (*TrustedCertificatesApiService)(&c.common)
	c.TypeAccessControlsApi = (*TypeAccessControlsApiService)(&c.common)
	c.UiPluginApi = (*UiPluginApiService)(&c.common)
	c.UiPluginResourceApi = (*UiPluginResourceApiService)(&c.common)
	c.UiPluginTenantsApi = (*UiPluginTenantsApiService)(&c.common)
	c.UiPluginsApi = (*UiPluginsApiService)(&c.common)
	c.UniversalRouterApi = (*UniversalRouterApiService)(&c.common)
	c.UniversalRouterDhcpApi = (*UniversalRouterDhcpApiService)(&c.common)
	c.UniversalRouterDnsApi = (*UniversalRouterDnsApiService)(&c.common)
	c.UniversalRouterHealthApi = (*UniversalRouterHealthApiService)(&c.common)
	c.UniversalRoutersApi = (*UniversalRoutersApiService)(&c.common)
	c.UniversalRoutingApi = (*UniversalRoutingApiService)(&c.common)
	c.UserApi = (*UserApiService)(&c.common)
	c.VCenterResourcesApi = (*VCenterResourcesApiService)(&c.common)
	c.VRealizeOrchestratorApi = (*VRealizeOrchestratorApiService)(&c.common)
	c.VRealizeOrchestratorsApi = (*VRealizeOrchestratorsApiService)(&c.common)
	c.VdcApi = (*VdcApiService)(&c.common)
	c.Vdc2Api = (*Vdc2ApiService)(&c.common)
	c.VdcComputePoliciesApi = (*VdcComputePoliciesApiService)(&c.common)
	c.VdcComputePolicies2Api = (*VdcComputePolicies2ApiService)(&c.common)
	c.VdcGroupApi = (*VdcGroupApiService)(&c.common)
	c.VdcGroupCandidatesApi = (*VdcGroupCandidatesApiService)(&c.common)
	c.VdcGroupsApi = (*VdcGroupsApiService)(&c.common)
	c.VdcGroupsSettingsApi = (*VdcGroupsSettingsApiService)(&c.common)
	c.VdcNetworkProfileApi = (*VdcNetworkProfileApiService)(&c.common)
	c.VirtualCenterApi = (*VirtualCenterApiService)(&c.common)
	c.VmcSddcsApi = (*VmcSddcsApiService)(&c.common)
	c.VrealizeBrowseApi = (*VrealizeBrowseApiService)(&c.common)
	c.VrealizeWorkflowsApi = (*VrealizeWorkflowsApiService)(&c.common)
	c.VroWorkflowExecutionApi = (*VroWorkflowExecutionApiService)(&c.common)
	c.VroWorkflowPresentationApi = (*VroWorkflowPresentationApiService)(&c.common)

	return c
}

func atoi(in string) (int, error) {
	return strconv.Atoi(in)
}

// selectHeaderContentType select a content type from the available list.
func selectHeaderContentType(contentTypes []string) string {
	if len(contentTypes) == 0 {
		return ""
	}
	if contains(contentTypes, "application/json") {
		return "application/json"
	}
	return contentTypes[0] // use the first content type specified in 'consumes'
}

// selectHeaderAccept join all accept types and return
func selectHeaderAccept(accepts []string) string {
	if len(accepts) == 0 {
		return ""
	}

	if contains(accepts, "application/json") {
		return "application/json"
	}

	return strings.Join(accepts, ",")
}

// contains is a case insenstive match, finding needle in a haystack
func contains(haystack []string, needle string) bool {
	for _, a := range haystack {
		if strings.ToLower(a) == strings.ToLower(needle) {
			return true
		}
	}
	return false
}

// Verify optional parameters are of the correct type.
func typeCheckParameter(obj interface{}, expected string, name string) error {
	// Make sure there is an object.
	if obj == nil {
		return nil
	}

	// Check the type is as expected.
	if reflect.TypeOf(obj).String() != expected {
		return fmt.Errorf("Expected %s to be of type %s but received %s.", name, expected, reflect.TypeOf(obj).String())
	}
	return nil
}

// parameterToString convert interface{} parameters to string, using a delimiter if format is provided.
func parameterToString(obj interface{}, collectionFormat string) string {
	var delimiter string

	switch collectionFormat {
	case "pipes":
		delimiter = "|"
	case "ssv":
		delimiter = " "
	case "tsv":
		delimiter = "\t"
	case "csv":
		delimiter = ","
	}

	if reflect.TypeOf(obj).Kind() == reflect.Slice {
		return strings.Trim(strings.Replace(fmt.Sprint(obj), " ", delimiter, -1), "[]")
	}

	return fmt.Sprintf("%v", obj)
}

// callAPI do the request.
func (c *APIClient) callAPI(request *http.Request) (*http.Response, error) {
	return c.cfg.HTTPClient.Do(request)
}

// Change base path to allow switching to mocks
func (c *APIClient) ChangeBasePath(path string) {
	c.cfg.BasePath = path
}

// prepareRequest build the request
func (c *APIClient) prepareRequest(
	ctx context.Context,
	path string, method string,
	postBody interface{},
	headerParams map[string]string,
	queryParams url.Values,
	formParams url.Values,
	fileName string,
	fileBytes []byte) (localVarRequest *http.Request, err error) {

	var body *bytes.Buffer

	// Detect postBody type and post.
	if postBody != nil {
		contentType := headerParams["Content-Type"]
		if contentType == "" {
			contentType = detectContentType(postBody)
			headerParams["Content-Type"] = contentType
		}

		body, err = setBody(postBody, contentType)
		if err != nil {
			return nil, err
		}
	}

	// add form parameters and file if available.
	if strings.HasPrefix(headerParams["Content-Type"], "multipart/form-data") && len(formParams) > 0 || (len(fileBytes) > 0 && fileName != "") {
		if body != nil {
			return nil, errors.New("Cannot specify postBody and multipart form at the same time.")
		}
		body = &bytes.Buffer{}
		w := multipart.NewWriter(body)

		for k, v := range formParams {
			for _, iv := range v {
				if strings.HasPrefix(k, "@") { // file
					err = addFile(w, k[1:], iv)
					if err != nil {
						return nil, err
					}
				} else { // form value
					w.WriteField(k, iv)
				}
			}
		}
		if len(fileBytes) > 0 && fileName != "" {
			w.Boundary()
			//_, fileNm := filepath.Split(fileName)
			part, err := w.CreateFormFile("file", filepath.Base(fileName))
			if err != nil {
				return nil, err
			}
			_, err = part.Write(fileBytes)
			if err != nil {
				return nil, err
			}
			// Set the Boundary in the Content-Type
			headerParams["Content-Type"] = w.FormDataContentType()
		}

		// Set Content-Length
		headerParams["Content-Length"] = fmt.Sprintf("%d", body.Len())
		w.Close()
	}

	if strings.HasPrefix(headerParams["Content-Type"], "application/x-www-form-urlencoded") && len(formParams) > 0 {
		if body != nil {
			return nil, errors.New("Cannot specify postBody and x-www-form-urlencoded form at the same time.")
		}
		body = &bytes.Buffer{}
		body.WriteString(formParams.Encode())
		// Set Content-Length
		headerParams["Content-Length"] = fmt.Sprintf("%d", body.Len())
	}

	// Setup path and query parameters
	url, err := url.Parse(path)
	if err != nil {
		return nil, err
	}

	// Adding Query Param
	query := url.Query()
	for k, v := range queryParams {
		for _, iv := range v {
			query.Add(k, iv)
		}
	}

	// Encode the parameters.
	url.RawQuery = query.Encode()

	// Generate a new request
	if body != nil {
		localVarRequest, err = http.NewRequest(method, url.String(), body)
	} else {
		localVarRequest, err = http.NewRequest(method, url.String(), nil)
	}
	if err != nil {
		return nil, err
	}

	// add header parameters, if any
	if len(headerParams) > 0 {
		headers := http.Header{}
		for h, v := range headerParams {
			headers.Set(h, v)
		}
		localVarRequest.Header = headers
	}

	// Override request host, if applicable
	if c.cfg.Host != "" {
		localVarRequest.Host = c.cfg.Host
	}

	// Add the user agent to the request.
	localVarRequest.Header.Add("User-Agent", c.cfg.UserAgent)

	if ctx != nil {
		// add context to the request
		localVarRequest = localVarRequest.WithContext(ctx)

		// Walk through any authentication.

		// OAuth2 authentication
		if tok, ok := ctx.Value(ContextOAuth2).(oauth2.TokenSource); ok {
			// We were able to grab an oauth2 token from the context
			var latestToken *oauth2.Token
			if latestToken, err = tok.Token(); err != nil {
				return nil, err
			}

			latestToken.SetAuthHeader(localVarRequest)
		}

		// Basic HTTP Authentication
		if auth, ok := ctx.Value(ContextBasicAuth).(BasicAuth); ok {
			localVarRequest.SetBasicAuth(auth.UserName, auth.Password)
		}

		// AccessToken Authentication
		if auth, ok := ctx.Value(ContextAccessToken).(string); ok {
			localVarRequest.Header.Add("Authorization", "Bearer "+auth)
		}
	}

	for header, value := range c.cfg.DefaultHeader {
		localVarRequest.Header.Add(header, value)
	}

	return localVarRequest, nil
}

func (c *APIClient) decode(v interface{}, b []byte, contentType string) (err error) {
	if strings.Contains(contentType, "application/xml") {
		if err = xml.Unmarshal(b, v); err != nil {
			return err
		}
		return nil
	} else if strings.Contains(contentType, "application/json") {
		if err = json.Unmarshal(b, v); err != nil {
			return err
		}
		return nil
	}
	return errors.New("undefined response type")
}

// Add a file to the multipart request
func addFile(w *multipart.Writer, fieldName, path string) error {
	file, err := os.Open(path)
	if err != nil {
		return err
	}
	defer file.Close()

	part, err := w.CreateFormFile(fieldName, filepath.Base(path))
	if err != nil {
		return err
	}
	_, err = io.Copy(part, file)

	return err
}

// Prevent trying to import "fmt"
func reportError(format string, a ...interface{}) error {
	return fmt.Errorf(format, a...)
}

// Set request body from an interface{}
func setBody(body interface{}, contentType string) (bodyBuf *bytes.Buffer, err error) {
	if bodyBuf == nil {
		bodyBuf = &bytes.Buffer{}
	}

	if reader, ok := body.(io.Reader); ok {
		_, err = bodyBuf.ReadFrom(reader)
	} else if b, ok := body.([]byte); ok {
		_, err = bodyBuf.Write(b)
	} else if s, ok := body.(string); ok {
		_, err = bodyBuf.WriteString(s)
	} else if s, ok := body.(*string); ok {
		_, err = bodyBuf.WriteString(*s)
	} else if jsonCheck.MatchString(contentType) {
		err = json.NewEncoder(bodyBuf).Encode(body)
	} else if xmlCheck.MatchString(contentType) {
		xml.NewEncoder(bodyBuf).Encode(body)
	}

	if err != nil {
		return nil, err
	}

	if bodyBuf.Len() == 0 {
		err = fmt.Errorf("Invalid body type %s\n", contentType)
		return nil, err
	}
	return bodyBuf, nil
}

// detectContentType method is used to figure out `Request.Body` content type for request header
func detectContentType(body interface{}) string {
	contentType := "text/plain; charset=utf-8"
	kind := reflect.TypeOf(body).Kind()

	switch kind {
	case reflect.Struct, reflect.Map, reflect.Ptr:
		contentType = "application/json; charset=utf-8"
	case reflect.String:
		contentType = "text/plain; charset=utf-8"
	default:
		if b, ok := body.([]byte); ok {
			contentType = http.DetectContentType(b)
		} else if kind == reflect.Slice {
			contentType = "application/json; charset=utf-8"
		}
	}

	return contentType
}

// Ripped from https://github.com/gregjones/httpcache/blob/master/httpcache.go
type cacheControl map[string]string

func parseCacheControl(headers http.Header) cacheControl {
	cc := cacheControl{}
	ccHeader := headers.Get("Cache-Control")
	for _, part := range strings.Split(ccHeader, ",") {
		part = strings.Trim(part, " ")
		if part == "" {
			continue
		}
		if strings.ContainsRune(part, '=') {
			keyval := strings.Split(part, "=")
			cc[strings.Trim(keyval[0], " ")] = strings.Trim(keyval[1], ",")
		} else {
			cc[part] = ""
		}
	}
	return cc
}

// CacheExpires helper function to determine remaining time before repeating a request.
func CacheExpires(r *http.Response) time.Time {
	// Figure out when the cache expires.
	var expires time.Time
	now, err := time.Parse(time.RFC1123, r.Header.Get("date"))
	if err != nil {
		return time.Now()
	}
	respCacheControl := parseCacheControl(r.Header)

	if maxAge, ok := respCacheControl["max-age"]; ok {
		lifetime, err := time.ParseDuration(maxAge + "s")
		if err != nil {
			expires = now
		}
		expires = now.Add(lifetime)
	} else {
		expiresHeader := r.Header.Get("Expires")
		if expiresHeader != "" {
			expires, err = time.Parse(time.RFC1123, expiresHeader)
			if err != nil {
				expires = now
			}
		}
	}
	return expires
}

func strlen(s string) int {
	return utf8.RuneCountInString(s)
}

// GenericSwaggerError Provides access to the body, error and model on returned errors.
type GenericSwaggerError struct {
	body  []byte
	error string
	model interface{}
}

// Error returns non-empty string if there was an error.
func (e GenericSwaggerError) Error() string {
	return e.error
}

// Body returns the raw bytes of the response
func (e GenericSwaggerError) Body() []byte {
	return e.body
}

// Model returns the unpacked model of the error
func (e GenericSwaggerError) Model() interface{} {
	return e.model
}
