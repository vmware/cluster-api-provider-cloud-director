#cloud-config
write_files:
- path: /root/node.sh
  owner: root
  content: |
    #!/usr/bin/env bash
    catch() {
       vmtoolsd --cmd "info-set guestinfo.post_customization_script_execution_status $?"
       error_message="$(date) $(caller): $BASH_COMMAND"
       echo "$error_message" &>> /var/log/capvcd/customization/error.log
       vmtoolsd --cmd "info-set guestinfo.post_customization_script_execution_failure_reason $error_message"

       cloud_init_output=""
       if [[ -f /var/log/cloud-init-output.log ]]
       then
         cloud_init_output=$(</var/log/cloud-init-output.log)
       fi
       vmtoolsd --cmd "info-set guestinfo.post_customization_cloud_init_output $cloud_init_output"
    }
    mkdir -p /var/log/capvcd/customization
    trap 'catch $? $LINENO' ERR EXIT
    set -ex

    vmtoolsd --cmd "info-set guestinfo.postcustomization.networkconfiguration.status in_progress"
      echo 'net.ipv6.conf.all.disable_ipv6 = 1' >> /etc/sysctl.conf
      echo 'net.ipv6.conf.default.disable_ipv6 = 1' >> /etc/sysctl.conf
      echo 'net.ipv6.conf.lo.disable_ipv6 = 1' >> /etc/sysctl.conf
      sudo sysctl -p
      # also remove ipv6 localhost entry from /etc/hosts
      sed -i 's/::1/127.0.0.1/g' /etc/hosts || true
    vmtoolsd --cmd "info-set guestinfo.postcustomization.networkconfiguration.status successful"

    vmtoolsd --cmd "info-set guestinfo.postcustomization.proxy.setting.status in_progress"
    export HTTP_PROXY="{{.HTTPProxy}}"
    export HTTPS_PROXY="{{.HTTPSProxy}}"
    export http_proxy="{{.HTTPProxy}}"
    export https_proxy="{{.HTTPSProxy}}"
    export NO_PROXY="{{.NoProxy}}"
    export no_proxy="{{.NoProxy}}"
    cat <<END > /etc/systemd/system/containerd.service.d/http-proxy.conf
    [Service]
    Environment="HTTP_PROXY={{.HTTPProxy}}"
    Environment="HTTPS_PROXY={{.HTTPSProxy}}"
    Environment="http_proxy={{.HTTPProxy}}"
    Environment="https_proxy={{.HTTPSProxy}}"
    Environment="no_proxy={{.NoProxy}}"
    Environment="NO_PROXY={{.NoProxy}}"
    END
    systemctl daemon-reload
    systemctl restart containerd
    vmtoolsd --cmd "info-set guestinfo.postcustomization.proxy.setting.status successful"

    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubeadm.node.join.status in_progress"
      # tag images
      for image in "coredns" "etcd" "kube-proxy" "kube-apiserver" "kube-controller-manager" "kube-scheduler"
      do
        image_ref=$(ctr -n=k8s.io image list | cut -d" " -f1 | grep $image)
        ref_path=$(echo $image_ref | sed 's/:.*//')
        new_tag_version=$(echo $image_ref | sed 's/.*://' | sed 's/_/-/')
        ctr -n=k8s.io image tag $image_ref $ref_path:$new_tag_version
      done
      __JINJA_RUNCMD_REPLACE_ME__
      if [[ ! -f /run/cluster-api/bootstrap-success.complete ]]
      then
        echo "file /run/cluster-api/bootstrap-success.complete not found" &>> /var/log/capvcd/customization/error.log
        exit 1
      fi
      export KUBECONFIG=/etc/kubernetes/kubelet.conf
      kubectl get po -A -owide
    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubeadm.node.join.status successful"

    echo "$(date) post customization script execution completed" &>> /var/log/capvcd/customization/status.log
    exit 0
runcmd:
- '[ ! -f /root/node.sh ] && cloud-init clean && sudo reboot'
# Only checking if /run/kubeadm/kubeadm-join-config.yaml as this is the main file needed to execute kubeadm join.
# Ignoring checks for .cert and .key files
- '[ ! -f /run/kubeadm/kubeadm-join-config.yaml ] && cloud-init clean && sudo reboot'
- bash /root/node.sh
timezone: UTC
disable_root: false
preserve_hostname: false
hostname: "{{.MachineName}}"
final_message: "The system is ready after $UPTIME seconds"
